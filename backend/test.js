require('dotenv').config();
const { sendSMS, formatPhoneNumber } = require('./services/smsService');
const { sendEmail, validateEmail } = require('./services/emailService');

/**
 * Script de test complet pour les services de notification
 */

async function runTests() {
  console.log('üß™ TESTS DU SYST√àME DE NOTIFICATIONS JM POMINVILLE');
  console.log('='.repeat(60));
  
  // Configuration actuelle
  console.log('\nüìã Configuration actuelle:');
  console.log(`   Mode: ${process.env.TEST_MODE === 'true' ? 'TEST (simulation)' : 'PRODUCTION (envoi r√©el)'}`);
  console.log(`   Twilio configur√©: ${!!process.env.TWILIO_ACCOUNT_SID}`);
  console.log(`   Email configur√©: ${!!process.env.EMAIL_USER}`);
  
  // Test 1: Formatage des num√©ros de t√©l√©phone
  console.log('\nüì± Test 1: Formatage des num√©ros de t√©l√©phone');
  const testPhones = [
    '514-555-0123',
    '5145550123', 
    '+15145550123',
    '15145550123'
  ];
  
  testPhones.forEach(phone => {
    try {
      const formatted = formatPhoneNumber(phone);
      console.log(`   ‚úÖ ${phone} ‚Üí ${formatted}`);
    } catch (error) {
      console.log(`   ‚ùå ${phone} ‚Üí Erreur: ${error.message}`);
    }
  });
  
  // Test 2: Validation des emails
  console.log('\nüìß Test 2: Validation des emails');
  const testEmails = [
    'test@example.com',
    'client@gmail.com',
    'invalid-email',
    'test@'
  ];
  
  testEmails.forEach(email => {
    const isValid = validateEmail(email);
    console.log(`   ${isValid ? '‚úÖ' : '‚ùå'} ${email} ‚Üí ${isValid ? 'Valide' : 'Invalide'}`);
  });
  
  // Test 3: Envoi SMS de test
  console.log('\nüì± Test 3: Envoi SMS de test');
  try {
    const smsResult = await sendSMS('514-555-0123', 'Test SMS de JM Pominville - Syst√®me op√©rationnel!');
    console.log(`   ${smsResult.success ? '‚úÖ' : '‚ùå'} SMS: ${smsResult.success ? 'Succ√®s' : '√âchec'}`);
    if (smsResult.simulated) console.log('   ‚ÑπÔ∏è  Mode simulation activ√©');
    if (!smsResult.success) console.log(`   Erreur: ${smsResult.error}`);
  } catch (error) {
    console.log(`   ‚ùå SMS: Erreur - ${error.message}`);
  }
  
  // Test 4: Envoi Email de test
  console.log('\nüìß Test 4: Envoi Email de test');
  try {
    const emailResult = await sendEmail(
      'test@example.com', 
      'Test JM Pominville - Syst√®me op√©rationnel',
      'Ceci est un test du syst√®me de notifications email de JM Pominville.'
    );
    console.log(`   ${emailResult.success ? '‚úÖ' : '‚ùå'} Email: ${emailResult.success ? 'Succ√®s' : '√âchec'}`);
    if (emailResult.simulated) console.log('   ‚ÑπÔ∏è  Mode simulation activ√©');
    if (!emailResult.success) console.log(`   Erreur: ${emailResult.error}`);
  } catch (error) {
    console.log(`   ‚ùå Email: Erreur - ${error.message}`);
  }
  
  // R√©sum√© final
  console.log('\nüìä R√âSUM√â DES TESTS');
  console.log('='.repeat(60));
  
  if (process.env.TEST_MODE === 'true') {
    console.log('‚úÖ Syst√®me en mode TEST - Toutes les notifications sont simul√©es');
    console.log('   Pour activer les envois r√©els:');
    console.log('   1. Configurez vos cl√©s API dans .env');
    console.log('   2. Changez TEST_MODE=false');
    console.log('   3. Relancez les tests');
  } else {
    console.log('üöÄ Syst√®me en mode PRODUCTION - Les notifications sont envoy√©es');
    console.log('   V√©rifiez que vous avez bien configur√©:');
    console.log('   - Twilio (SMS)');
    console.log('   - Gmail (Email)');
  }
  
  console.log('\nüîó Endpoints disponibles:');
  console.log('   POST /api/notifications/send - Envoyer une notification');
  console.log('   POST /api/notifications/test - Test manuel');
  console.log('   GET /api/status - Statut des services');
  console.log('   GET /api/test - Test de connectivit√©');
  
  console.log('\n‚ú® Tests termin√©s!');
}

// Ex√©cution des tests
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { runTests };
